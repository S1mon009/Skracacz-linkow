"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const get = (input, opt = {}) => __awaiter(void 0, void 0, void 0, function* () {
    // If full link is provided, filter code out of it
    const fullLinkRegex = /gotiny.cc\/(.{4,32})/;
    let code = input;
    const regexResponse = input.match(fullLinkRegex);
    if (regexResponse) {
        code = regexResponse[1];
    }
    const requestURL = new URL(`https://gotiny.cc/api/${code}`);
    // If extended option is present, add corresponding query params
    if (opt.extended) {
        requestURL.searchParams.set("format", "json");
    }
    // Make request to API
    try {
        const res = yield axios_1.default.get(requestURL.href);
        return res.data;
    }
    catch (err) {
        throw {
            source: "sdk",
            code: "not-found",
            message: "GoTiny link not found",
        };
    }
});
exports.default = get;
